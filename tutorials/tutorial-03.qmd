---
title: "üî® Working with R"
subtitle: "Tutorial - Session 03"
date: last-modified
date-format: "DD.MM.YYYY"
---

::: {.callout-tip icon="false"}
[![Quarto Slides](https://raw.githubusercontent.com/faucommsci/teaching_materials/refs/heads/main/images/badges/badge-quarto-slide.svg) Link to slides](../slides/slides-03.html)

[![](https://raw.githubusercontent.com/faucommsci/teaching_materials/refs/heads/main/images/badges/badge-quarto_document.svg) Download source file](https://github.com/chrdrn/dbd_2024/blob/main/tutorial/tutorial-03.qmd)

[![](https://raw.githubusercontent.com/faucommsci/teaching_materials/refs/heads/main/images/badges/badge-binder_rstudio.svg) Open interactive and executable RStudio environment](https://mybinder.org/v2/gh/faucommsci/dbd_binder/HEAD?urlpath=rstudio)
:::

## Background

::: callout-tip
## Todays's data basis: Hollywood Age Gaps

> An informational site showing the age gap between movie love interests.

The data follows certain rules:

-   The two (or more) actors play actual love interests (not just friends, coworkers, or some other non-romantic type of relationship)
-   The youngest of the two actors is at least 17 years old
-   Not animated characters
:::

-   The best way to learn R is by trying. This document tries to display a version of the "normal" data processing procedure.
-   Use `tidytuesday` data as an example to showcase the potential

## Packages

-   The `pacman::p_load()` package is used to load the packages, which has several advantages over the conventional method with `library()`:
-   Concise syntax
-   Automatic installation (if the package is not already installed)
-   Loading multiple packages at once
-   Automatic search for dependencies

```{r load-packages}
pacman::p_load(
  here, 
  magrittr, 
  tidyverse,
  janitor,
  easystats,
  sjmisc,
  ggpubr)
```

## Codechunks aus der Sitzung

### Die erste "Runde" der Datenaufbereitung

#### Datenimport via URL

| Variable | Description |
|:-------------------------|:---------------------------------------------|
| `movie_name` | Name of the film |
| `release_year` | Release year |
| `director` | Director of the film |
| `age_difference` | Age difference between the characters in whole years |
| `couple_number` | An identifier for the couple in case multiple couples are listed for this film |
| `actor_1_name` | The name of the older actor in this couple |
| `actor_2_name` | The name of the younger actor in this couple |
| `actor_1_birthdate` | The birthdate of the older member of the couple |
| `actor_2_birthdate` | The birthdate of the younger member of the couple |
| `actor_1_age` | The age of the older actor when the film was released |
| `actor_2_age` | The age of the younger actor when the film was released |

: Variablennamen und -beschreibungen

```{r import-data-raw}
# Import data from URL
age_gaps <- read_csv("http://hollywoodagegap.com/movies.csv") %>% 
  janitor::clean_names()

# Check data set
age_gaps
```

#### Initiale √úberpr√ºfung der Daten

::: callout-note
## Sind die Daten *"technisch korrekt*"?

-   ‚úÖ [Wie viele F√§lle sind enthalten? Wie viele Variablen?](#check-overview)

-   ‚úÖ [Wie lauten die Variablennamen? Sind sie sinnvoll?](#check-overview)

-   ‚úÖ [Welchen Typ hat jede Variable, z. B. numerisch, kategorisch, logisch?](#check-overview-correction)

-   ‚úÖ [Wie viele eindeutige Werte hat jede Variable?](#check-location-parameter)

-   ‚úÖ [Welcher Wert tritt am h√§ufigsten auf, und wie oft kommt er vor?](#check-location-parameter)

-   ‚úÖ [Gibt es fehlende Werte? Wenn ja, wie h√§ufig ist dies der Fall?](#check-location-parameter)
:::

##### √úberblick √ºber die Daten {#check-overview}

```{r table-initial-overview}
age_gaps %>% glimpse()
```

##### Korrekturen {#check-overview-correction}

```{r recoding-data-to-correct}
age_gaps_correct <- age_gaps %>% 
  mutate(
    across(ends_with("_birthdate"), ~as.Date(.)) # set dates to dates
  )
```

##### √úberpr√ºfung Lageparameter {#check-location-parameter}

```{r table-location-parameter}
age_gaps_correct %>% descr()
```

### Die ersten Datenexplorationen

#### Wie sind die Altersunterschiede verteilt?

```{r figure-age-difference}
age_gaps_correct %>% 
    ggplot(aes(x = age_difference)) +
    geom_bar() +
    theme_pubr()
```

#### In welchen Filmen ist der Altersunterschied am h√∂chsten?

```{r table-movies-highest-age-difference}
age_gaps_correct %>% 
    arrange(desc(age_difference)) %>% 
    select(movie_name, age_difference, release_year) 
```

```{r table-movies-highest-age-difference-current}
age_gaps_correct %>% 
    filter(release_year >= 2022) %>% 
    arrange(desc(age_difference)) %>% 
    select(
        movie_name, age_difference, release_year, 
        actor_1_name, actor_2_name) 
```

#### Gibt es einen Zusammenhang zwischen Altersunterschied und Release?

##### (Durchschnitts-)Unterschied nach Jahren

```{r figure-age-difference-mean-by-year}
age_gaps_correct %>% 
    group_by(release_year) %>% 
    summarise(age_difference_mean = mean(age_difference)) %>% 
    ggplot(aes(release_year, age_difference_mean)) +
    geom_col() +
    theme_pubr()
```

##### Verteilung nach Jahren

```{r figure-age-difference-by-year}
#| column: page
#| fig-width: 16
#| fig-height: 9

ggpubr::ggboxplot(
    data = age_gaps_correct, 
    x = "release_year", 
    y = "age_difference", 
  ) + 
   # Rotate x-axis labels by 90 degrees
  theme(
    axis.text.x = element_text(
        angle = 90,
        vjust = 0.5,
         hjust=1))  
```

##### √úberpr√ºfung der Korrelation

```{r model-age-difference-release-year-correlation}
age_gaps %>%
  select(release_year, age_difference) %>% 
  correlation::correlation()
```

##### Sch√§tzung OLS

```{r model-age-difference-release-year-lm}
# Sch√§tzung des Models
mdl <- lm(age_difference ~ release_year, data = age_gaps_correct)

# Output
mdl %>% parameters::parameters()
mdl %>% performance::model_performance()
```

```{r model-age-difference-release-lm-report}
mdl %>% report::report()
```